# From the '08 paper: http://www.vpri.org/pdf/tr2008003_experimenting.pdf

# Figure 2.1: A PEG that recognizes simple arithmetic expressions
#
ometa ExpRecognizer {
  dig = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9',
  num = dig+,
  fac = fac '*' num
      | fac '/' num
      | num,
  exp = exp '+' fac
      | exp '-' fac
      | fac
}

# Figure 2.2: A parser for simple arithmetic expressions
#
ometa ExpParser {
  dig = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9',
  num = dig+:ds,
  fac = fac:x '*' num:y -> ['mul', x, y]
      | fac:x '/' num:y -> ['div', x, y]
      | num,
  exp = exp:x '+' fac:y -> ['add', x, y]
      | exp:x '-' fac:y -> ['sub', x, y]
      | fac
}


# Figure 2.3: Evaluating expressions
#
# TODO: cleanup below comment/example
#
# Running this with parse trees generated by the `ExpParser`
#
# ```
# ['mul', ['num', 6],['add', ['num', 4], ['num', 3]]] produces 42
# ```
ometa ExpEvaluator {
  trans = ['num' anything:x] -> x.to_s
        | ['add' eval:x eval:y] -> "(#{x} + #{y})"
        | ['sub' eval:x eval:y] -> "(#{x} - #{y})"
        | ['mul' eval:x eval:y] -> "(#{x} * #{y})"
        | ['div' eval:x eval:y] -> "(#{x} / #{y})"
}


# Figure 2.4: “Compiling” expressions to Crystal
#
ometa ExpEvaluator {
  trans = ['num' anything:x] -> x.to_s
        | ['add' eval:x eval:y] -> "(#{x} + #{y})"
        | ['sub' eval:x eval:y] -> "(#{x} - #{y})"
        | ['mul' eval:x eval:y] -> "(#{x} * #{y})"
        | ['div' eval:x eval:y] -> "(#{x} / #{y})"
}

# The OMeta parser (the front-end of my implementation) is written in OMeta
# itself. It translates the code for a rule, which is a stream of characters,
# into a parse tree in which sequences are represented as `And` nodes, choices
# as `Or` nodes, rule applications as `App` nodes, and so on. As an example,
# the parse tree generated for the body of the rule
#
# ```
# foo = bar baz
# ```
#
# is
#
# ```
# ['Or', ['And', ['App', 'foo'], ['App', 'bar']]]
# ```
#
# which is later transformed by the OMeta compiler into the code that
# implements that rule.
